<!--The Automated Patriot-->

<% include ../partials/header %>

<div class="row">
  <div class="col-md-12">
    <div class="card mb-3">
      <!--<p class="d-flex justify-content-center">-->
        <div class="video-container">>
        <iframe width="90%" height="90%" src="https://www.youtube.com/embed/Asgdg3nJt58?rel=0&amp;showinfo=0" frameborder="1" allow="autoplay; encrypted-media" allowfullscreen></iframe></div>
      <!--</p>-->
      <div class="card-body">
        <h2 class="card-title">The Automated Patriot</h2>
        <hr>
        <p class="card-text">
          <p>
            <h3>patriot</h3>
            <em>[pey-tree-uh t, -ot or, esp. British, pa-tree-uh t]</em>
            noun<br>
            1.   a person who loves, supports, and defends his or her country and its interests with devotion.
          </p>
          <p class="d-flex justify-content-center">
            I always enjoy timeless American exhibitions of patriotism, but even more so I appreciate juxtapositions of those displays. What is the opposite of an awesome fireworks show? How can the flag, a symbol that is eagerly devoted to supporting its country, be disassociated from human behavior and be devoid of emotion? An idea kept running in my head over and over, I imagined a waving cocktail sized flag, while the Star-Spangled Banner plays on low quality crunchy audio. Combining my Arduino knowledge and the Sweep demo sketch, I mashed together two Digisparks to create this programming abomination. Some ideas just need to get out of your head as soon as possible.
            <br>
          </p>
          <h3>BOM:</h3>
          <ul class="list-group list-group-flush">
            <li class="list-group-item">
              <a href="https://www.aliexpress.com/store/product/Digispark-kickstarter-Micro-development-board-ATTINY85-module-for-Arduino-usb/1022067_32584975067.html">
              Digispark Clones</a>
            </li>
            <li class="list-group-item">
              <a href="https://www.aliexpress.com/store/product/Micro-3-7g-Servo-For-Control-Aeromodelling-Aircraft-Flight-Direction-Helicopter-Model-4-8-To-7/3865090_32871120405.html">
              Micro Servo</a>
            </li>
            <li class="list-group-item">
              <a href="https://www.aliexpress.com/store/product/20pcs-5x7-4x6-3x7-2x8-cm-double-Side-Copper-prototype-pcb-Universal-Board-for-Arduino/1192233_1847727667.html">
              Circuit board 4.5x4.5cm</a>
            </li>
            <li class="list-group-item">
              <a href="https://www.aliexpress.com/store/product/2pcs-lot-8-ohm-3W-3-Watt-Diameter-77MM-3inch-Round-Speaker-45MM-External-Magnetic/1021664_32708750872.html">
              2in 8ohm Speaker</a>
            </li>
            <li class="list-group-item">
              Plastic Enclosure 13.5x7cm
            </li>
            <li class="list-group-item">
              <a href="https://www.aliexpress.com/store/product/10pcs-12MM-self-return-momentary-push-button-switch/2024048_32692164728.html">
              Push On/Off Switch</a>
            </li>
          </ul>
          <br>
          <p class="text-left">
            I had little experience using servos, but I knew that servos were small motors that moved things, so this couldn’t be too difficult a task to handle. The first purchase specifically for this project was a box of 144 American Flag Picks, the heart of this operation, made in China. For the brains of this I figure using Digisparks would be perfect, they’re incredibly small Attiny85 microcontrollers that should be able to handle playing a song while moving a servo.  For audio capability either a speaker or a piezo buzzer would work, I settled on a small 2in speaker with a ripped paper cone. To house this project I recycled a gray enclosure with lots of holes from previous builds.
          </p>
          <p class="text-center"><img src="https://media.giphy.com/media/1xmAfRmxMnAApGAS1y/giphy.gif"></p>
          <p class="text-left">
            My electronics bin had a few micro servos that should easily handle the flag waving duties. Getting the servo to behave properly was a bit more complicated. I started by attaching one to an Arduino and uploading the “Sweep” sketch to swing a servo 0-180 degrees. Just like in all good programs, slight modifications usually caused unexpected gear-grinding results. I soon realized that micro servos quality can vary wildly, and in the future it’s worth using the premium models. I settled on a Radio Shack (RIP) micro servo from a motor sampler pack, it behaves well enough. Attaching the flag to the servo was very simple, using a short piece of shrink tubing the flag was secure on the servo arm. Once I set the rotation degrees of the servo I was able to glue it on the inside of the lid on my enclosure, allowing it to rotate inside when finished.
          </p>
          <p class="text-left">
            For the Star Spangled Banner performance, I was completely out of my league with how to control this. Luckily I was able to find someone’s code to play the song with an Arduino, which when run through a Digispark causes some weird notes to drop. This is a feature, not a bug, and these were kept for added character. Still I had no idea how to handle the timing of the code to combine this with my servo actions. I started digesting NoDelay programs, trying to piece and patch my way to victory, but never was able to run both functions on the same Digispark. I settled on running the programs on separate devices, while not ideal this performed just as intended.
          </p>
          <p class="text-left">
            Instead of spending more time making the programming and construction perfect, I realized what I built worked exactly as I had expected with my initial idea. When first researching microcontrollers I learned they’re excellent for prototyping, and cobbling together this weird project from components I had lying around impressed me enough to be a successful prototype. While this is probably something I will revisit later, for now it will stand as a milestone of the start of my programming experience.
          </p>
        </p>
        <div class="float-right">
        </div>
      </div>
    </div>
   <!--Comments section-->
    <!--<div class="card">-->
    <!--  <div class="card-body">-->
    <!--    <div class="text-right">-->
    <!--      <a class="btn btn-success" href="/projects/<%= project._id %>/comments/new">Add New Comment</a>-->
    <!--    </div>-->
    <!--    <hr>-->
    <!--    <div class="row">-->
    <!--    <% project.comments.forEach(function(comment){ %>-->
    <!--      <div class="col-md-12 mb-2">-->
    <!--        <div class="card">-->
    <!--          <div class="card-body">-->
    <!--            <div class="text-left">-->
    <!--              <p class="card-title"><em><a href="/users/<%= comment.author.id %>"><%= comment.author.username %></a></em></p>-->
    <!--              <p class="card-text"><%= comment.text %></p>-->
    <!--            </div>-->
    <!--            <div class="text-right">-->
    <!--              <p><%= moment(comment.createdAt).fromNow() %></p>-->
                  
    <!--              <% if(currentUser && comment.author.id.equals(currentUser._id) || currentUser && currentUser.isAdmin){ %>-->
    <!--              <div class="text-right">-->
    <!--                <a href="/projects/<%=project._id%>/comments/<%=comment._id%>/edit" class="btn btn-sm btn-warning">EDIT</a>-->
    <!--                <form class="delete-form" action="/community/<%=project._id%>/comments/<%=comment._id%>?_method=DELETE" method="POST">-->
    <!--                  <button class="btn btn-sm btn-danger">DELETE</button>-->
    <!--                </form>-->
    <!--              </div>-->
    <!--              <% } %>-->
    <!--            </div>  <!-- Comment edit/delete -->-->
    <!--          </div>-->
    <!--        </div>-->
    <!--      </div>-->
    <!--    <% }) %>-->
    <!--    </div>-->
    <!--  </div>-->
    <!--</div>-->
  </div>
</div>

<% include ../partials/footer %>